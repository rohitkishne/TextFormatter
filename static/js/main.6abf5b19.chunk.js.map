{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlfor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","placeholder","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","about","App","setMode","setAlert","message","setTimeout","body","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6abf5b19.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from \"react-router-dom\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li> */}\r\n            \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired    \r\n                }\r\n\r\nNavbar.defaultProps = {\r\n    title: 'TextUtils',\r\n    about:  'About'\r\n  };\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"changed\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to UpperCase\", \"success\")\r\n    }\r\n    const handleLowClick = ()=>{\r\n        // console.log(\"changed\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to LowerCase\", \"success\")\r\n    }\r\n    \r\n    const handleClearClick = ()=>{\r\n        // console.log(\"changed\");\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"TextArea has been successfully cleared\", \"success\")\r\n    }\r\n  \r\n    const handleExtraSpaces = ()=>{\r\n        // console.log(\"changed\");\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces has been removed successfully\", \"success\")\r\n    }\r\n   \r\n    const handleCopy = ()=>{\r\n        // console.log(\"changed\");\r\n        let newText = document.getElementById(\"myBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Text has been Copied successfully\", \"success\")\r\n    }\r\n   \r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"changed to OnChange\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\" // wrong way to change the state\r\n    // setText(\"new text\") // wrong way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style = {{color: props.mode==='dark'?'white':'#0c0b3c'}}>\r\n            <h2>{props.heading} </h2>\r\n            <div className=\"mb-2\">\r\n                <textarea\r\n                    className=\"form-control\"\r\n                    value={text}\r\n                    onChange={handleOnChange}\r\n                    style = {{backgroundColor: props.mode==='dark'?'#070636':'white', color: props.mode==='dark'?'white':'#0c0b3c'}}\r\n                    id=\"myBox\"\r\n                    rows=\"8\"\r\n                    placeholder=\"Enter Your Text Here\"\r\n                ></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>Change to UpperCase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLowClick}>Change to LowerCase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleClearClick}>Clear All Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>Copy to Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n\r\n        </div>\r\n\r\n        <div className=\"container m-3 px-3\" style = {{color: props.mode==='dark'?'white':'#0c0b3c'}}>\r\n            <h2 >Your Text Details</h2>\r\n            <p className=\"text-danger\">{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} Characters</p>\r\n            <p className=\"text-danger\">{0.18 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes take to read a word</p>\r\n            <h2 >Preview</h2>\r\n            <p className=\"text-danger\">{text.length>0?text:\"Enter Your text to Preview Here\"}</p>\r\n        </div>\r\n            \r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n    <div style={{height: '50px'}}>\r\n   { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>}\r\n     </div>   )\r\n    }\r\n        \r\n      \r\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from \"./components/Alert\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n\n// } from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light'){\n      setMode('dark')\n      document.body.style.background = '#0c0b3c';\n      showAlert(\"Dark Mode has been Enabled\", \"success\")\n    }\n    else{\n      setMode('light')\n      document.body.style.background = 'white';\n      showAlert(\"Light Mode has been Enabled\", \"success\")\n    }\n\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n\n    \n      <Navbar title=\"TextFormatter\" about=\"About\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n      {/* <Switch>\n          <Route path=\"/about\">\n          <About showAlert={showAlert} mode={mode}/>\n          </Route>\n          <Route path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter Your Text Below\" mode={mode}/>\n          {/* </Route>\n        </Switch>\n       */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}